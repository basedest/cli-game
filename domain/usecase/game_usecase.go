package usecase

import (
	"github.com/basedest/cli-game/domain/entity"
	"github.com/basedest/cli-game/domain/repository"
)

// GameUseCase defines the game logic operations
type GameUseCase interface {
	Go(room string) (string, error)
	LookAround() string
	TakeItem(item string) (string, error)
	Equip(item string) (string, error)
	Use(item, obj string) (string, error)
	Restart() string
}

// gameUseCase implements the GameUseCase interface
type gameUseCase struct {
	repo repository.GameRepository
}

// NewGameUseCase creates a new game use case
func NewGameUseCase(repo repository.GameRepository) GameUseCase {
	return &gameUseCase{
		repo: repo,
	}
}

// Go moves the player to a different room
func (g *gameUseCase) Go(roomName string) (string, error) {
	player := g.repo.GetPlayer()
	
	for _, entrance := range player.Location.Entrances {
		if entrance.Room.Name == roomName {
			if entrance.Door != nil && entrance.Door.Locked {
				return "", entity.NewGameError("–¥–≤–µ—Ä—å –∑–∞–∫—Ä—ã—Ç–∞")
			}
			player.Location = entrance.Room
			
			// –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–ø–∞–ª –Ω–∞ —É–ª–∏—Ü—É, –æ—Ç–º–µ—á–∞–µ–º —Ü–µ–ª—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
			if player.Location.Name == "—É–ª–∏—Ü–∞" {
				idx := entity.FindGoalIndex(player.Goals, "–∏–¥—Ç–∏ –≤ —É–Ω–∏–≤–µ—Ä")
				if idx != -1 {
					player.Goals[idx].Completed = true
					
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Ü–µ–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
					allGoalsCompleted := true
					for _, goal := range player.Goals {
						if !goal.Completed {
							allGoalsCompleted = false
							break
						}
					}
					
					// –ï—Å–ª–∏ –≤—Å–µ —Ü–µ–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –≤—ã–≤–æ–¥–∏–º —Ç–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
					if allGoalsCompleted {
						return onGoMessage(player.Location) + "\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–ª–∏ —Ä—é–∫–∑–∞–∫ –∏ –¥–æ–±—Ä–∞–ª–∏—Å—å –¥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞! –ú–∏—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! üéâ", nil
					}
				}
			}
			
			return onGoMessage(player.Location), nil
		}
	}
	
	return "", entity.NewGameError("–Ω–µ—Ç –ø—É—Ç–∏ –≤ " + roomName)
}

// LookAround returns a description of the current room
func (g *gameUseCase) LookAround() string {
	player := g.repo.GetPlayer()
	var res string
	
	// Special case for kitchen
	if player.Location.Name == "–∫—É—Ö–Ω—è" {
		res += "—Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –Ω–∞ –∫—É—Ö–Ω–µ, "
	}

	// Special case for street
	if player.Location.Name == "—É–ª–∏—Ü–∞" {
		res += "—Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –Ω–∞ —É–ª–∏—Ü–µ, "
	}
	
	itemsFound := false
	for _, object := range player.Location.Objects {
		if container, ok := object.(entity.Container); ok && !container.IsEmpty() {
			res += container.String() + ", "
			itemsFound = true
		}
	}
	
	// Special case for empty room that's not kitchen and street
	if !itemsFound && player.Location.Name != "–∫—É—Ö–Ω—è" && player.Location.Name != "—É–ª–∏—Ü–∞" {
		res += "–ø—É—Å—Ç–∞—è –∫–æ–º–Ω–∞—Ç–∞"
	} else if itemsFound {
		// Remove trailing comma and space
		res = res[:len(res)-2]
	}
	
	// Add goals except in the room
	if player.Location.Name != "–∫–æ–º–Ω–∞—Ç–∞" {
		goalsString := player.GetGoalsString()
		if goalsString != "" {
			// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—è—Ç—É—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–∫—Å—Ç –∏ –º—ã –¥–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–∏
			if res != "" {
				res += ", "
			}
			res += goalsString
		}
	}
	
	res += ". –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ - " + player.Location.GetEntrancesString()
	return res
}

// TakeItem allows the player to pick up an item
func (g *gameUseCase) TakeItem(itemName string) (string, error) {
	player := g.repo.GetPlayer()
	
	if player.Inventory == nil {
		return "", entity.NewGameError("–Ω–µ–∫—É–¥–∞ –∫–ª–∞—Å—Ç—å")
	}
	
	for _, object := range player.Location.Objects {
		if container, ok := object.(entity.Container); ok {
			item, err := container.Remove(itemName)
			if err == nil {
				player.Inventory.Add(item)
				return "–ø—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å: " + item.GetName(), nil
			}
		}
	}
	
	return "", entity.NewGameError("–Ω–µ—Ç —Ç–∞–∫–æ–≥–æ")
}

// Equip allows the player to equip an item
func (g *gameUseCase) Equip(itemName string) (string, error) {
	player := g.repo.GetPlayer()
	
	for _, object := range player.Location.Objects {
		if container, ok := object.(entity.Container); ok {
			item, err := container.Remove(itemName)
			if err == nil {
				if equip, ok := item.(entity.Equippable); ok {
					return "–≤—ã –Ω–∞–¥–µ–ª–∏: " + item.GetName(), equip.Equip(player)
				}
				return "", entity.NewGameError("—Ç—ã –∫–∞–∫ " + item.GetName() + " –Ω–∞–¥–µ—Ç—å —Å–æ–±—Ä–∞–ª—Å—è?")
			}
		}
	}
	
	return "", entity.NewGameError("–Ω–µ—Ç —Ç–∞–∫–æ–≥–æ")
}

// Use allows the player to use an item on an object
func (g *gameUseCase) Use(itemName, objName string) (string, error) {
	player := g.repo.GetPlayer()
	
	if player.Inventory == nil {
		return "", entity.NewGameError("–Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ - " + itemName)
	}
	
	item, err := player.Inventory.GetItemByName(itemName)
	if err != nil {
		return "", entity.NewGameError("–Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ - " + itemName)
	}
	
	for _, obj := range player.Location.Objects {
		if obj.GetName() == objName {
			if usable, ok := obj.(entity.Usable); ok {
				return usable.Use(item)
			}
			return "", entity.NewGameError("–Ω–µ –∫ —á–µ–º—É –ø—Ä–∏–º–µ–Ω–∏—Ç—å")
		}
	}
	
	return "", entity.NewGameError("–Ω–µ –∫ —á–µ–º—É –ø—Ä–∏–º–µ–Ω–∏—Ç—å")
}

// Restart resets the game state
func (g *gameUseCase) Restart() string {
	g.repo.InitializeWorld()
	return "–∏–≥—Ä–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞"
}

// onGoMessage returns a message when entering a room
func onGoMessage(room *entity.Room) (res string) {
	switch room.Name {
	case "–∫—É—Ö–Ω—è":
		res += "–∫—É—Ö–Ω—è, –Ω–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ."
	case "–∫–æ—Ä–∏–¥–æ—Ä":
		res += "–Ω–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ."
	case "–∫–æ–º–Ω–∞—Ç–∞":
		res += "—Ç—ã –≤ —Å–≤–æ–µ–π –∫–æ–º–Ω–∞—Ç–µ."
	case "—É–ª–∏—Ü–∞":
		return "–Ω–∞ —É–ª–∏—Ü–µ –≤–µ—Å–Ω–∞. –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ - –¥–æ–º–æ–π"
	default:
		return "—Ç—ã –æ–∫–∞–∑–∞–ª—Å—è –≤ –±–µ—Å–∫—Ä–∞–π–Ω–µ–π –±–µ–∑–¥–Ω–µ. —Ç—É—Ç –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. —Ç—ã –æ–±—Ä–µ—á—ë–Ω."
	}
	res += " –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ - " + room.GetEntrancesString()
	return
} 